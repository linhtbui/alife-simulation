In this reading we reviewed the concept of a linked list and some function
that may be useful for manipulating and accessing certain parts of our
list. Inside our list, we need specific nodes with declared
fields. Typically inside a node, there will be a value as well as a pointer
to the next node. In order to create a linked list, we need to make a
wrapper function that will set aside the appropriate amount of memory and
set the first value of the list into NULL.

Three common motions that we can utilize in a linked list consist of
insertion, traversal, and deletion.

In order to insert a node to the front of the list, we make the list itself
point to the node and make the inserted node point to what was previously
at the front of the list.

If we want to traverse our list, we have to iterate over the list with the
condition that the variable "cur" is NULL. "cur" is defined as a variable
that holds the first node of the list. As we iterate over the list, we
change cur to be the next element of the first one. We can either iterate
over the linked list to traverse it or we can do it recursively. It is
important to know how both of the concepts work over linked lists as well
as in general.

If we want to delete a node from the list, we have to incorporate the idea
of traversing over it. If we want to delete the first node of the list, we
make the list point to what the first node was pointing to with list->first
= list -> first -> next. However, if we want to delete node that are after
the first, we have to traverse the list under the condition that cur->next
is not NULL. Then we would reassign, cur->next = cur->next->next in order
to skip one of the nodes that is to be deleted.

Some of the questions that came up:

Will we have to worry about pointers in eclipse like we did in C?
How different will the implementation of linked lists be in Java when
compared to C. 

